#include <iostream>
#include <vector>
using namespace std;
void backtrack(vector<int>& arr, int target, int start, vector<int>& path, int sum, vector<vector<int>>& result) {
    if (sum == target) {
        result.push_back(path);
        return;
    }
    if (sum > target) return; // prune
    for (int i = start; i < arr.size(); i++) {
        path.push_back(arr[i]);
        backtrack(arr, target, i + 1, path, sum + arr[i], result);
        path.pop_back();
    }
}
vector<vector<int>> subsetSum(vector<int>& arr, int target) {
    vector<vector<int>> result;
    vector<int> path;
    backtrack(arr, target, 0, path, 0, result);
    return result;
}
int main() {
    vector<int> arr = {3, 34, 4, 12, 5, 2};
    int target = 9;
    vector<vector<int>> subsets = subsetSum(arr, target);
    if (subsets.empty()) {
        cout << "No subset found.\n";
    } else {
        cout << "Subsets with sum " << target << ":\n";
        for (auto& subset : subsets) {
            cout << "{ ";
            for (int x : subset) cout << x << " ";
            cout << "}\n";
        }
    }
    return 0;
}
